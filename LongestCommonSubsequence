package recursion;

/**
 * Given two strings text1 and text2, return the length of their longest common
 * subsequence. If there is no common subsequence, return 0.
 * 
 * A subsequence of a string is a new string generated from the original string
 * with some characters (can be none) deleted without changing the relative
 * order of the remaining characters.
 * 
 * For example, "ace" is a subsequence of "abcde". A common subsequence of two
 * strings is a subsequence that is common to both strings.
 * 
 * 
 * Example 1:
 * 
 * Input: text1 = "abcde", text2 = "ace" Output: 3 Explanation: The longest
 * common subsequence is "ace" and its length is 3. Example 2:
 * 
 * Input: text1 = "abc", text2 = "abc" Output: 3 Explanation: The longest common
 * subsequence is "abc" and its length is 3.
 * 
 */

public class LongestCommonSubsequence {

	public static void main(String[] args) {

		System.out.println(longestCommonSubsequence("abc", "abc"));
	}

	public static int longestCommonSubsequence(String text1, String text2) {
		return lcs(text1, text2, text1.length(), text2.length());
	}

	static int lcs(String x, String y, int m, int n) {
		if (m == 0 || n == 0)
			return 0;

		if (x.charAt(m - 1) == y.charAt(n - 1)) {
			return 1 + lcs(x, y, m - 1, n - 1);
		}

		return Math.max(lcs(x, y, m, n - 1), lcs(x, y, m - 1, n));
	}

}
